# In this test, the image to use is selected in a vertex shader, passed
# to the fragment shader as a (flat) input, and then used for an image store.
[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_bindless_texture
GL_ARB_shader_image_load_store

[vertex shader]
#version 330
#extension GL_ARB_bindless_texture: require
#extension GL_ARB_shader_image_load_store: enable

in writeonly image2D img;
in vec4 piglit_vertex;

flat out writeonly image2D image_vs;

void main()
{
	gl_Position = piglit_vertex;
	image_vs = img;
}

[fragment shader]
#version 330
#extension GL_ARB_bindless_texture: require
#extension GL_ARB_shader_image_load_store: enable

flat in writeonly image2D image_vs;

uniform vec4 color;
out vec4 outcolor;

void main()
{
	imageStore(image_vs, ivec2(gl_FragCoord.xy), color);
	outcolor = vec4(0.0, 0.0, 0.0, 1.0);
}

[test]
# Texture 0 is the imageStore output.
texture rgbw 0 (16, 16) GL_RGBA8
resident image texture 0 GL_RGBA8
vertex attrib handle img 0

# Texture 1 is the rendering output. We don't care about this.
texture rgbw 1 (16, 16) GL_RGBA8

# Store red using imageStore
uniform vec4 color 1.0 0.0 0.0 1.0
fb tex 2d 1
draw rect -1 -1 2 2

# Test the result of imageStore
memory barrier GL_FRAMEBUFFER_BARRIER_BIT
fb tex 2d 0
probe all rgba 1.0 0.0 0.0 1.0
