# Verify that an image load is combined with
# a previous compatible image load

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_compute_shader
GL_ARB_shader_image_load_store

[compute shader]
#version 330
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_atomic_counters: enable
#extension GL_ARB_shader_image_load_store: enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform atomic_uint counter;
layout(rgba8) uniform image2D tex;
layout(rgba8) uniform image2D tex1;

void main()
{
  ivec2 coord = ivec2(0, 0);

  // the following two loads should be combined
  vec4 val = imageLoad(tex, coord);
  vec4 val1 = imageLoad(tex, coord);

  if (val.x == val1.x)
    atomicCounterIncrement(counter);

  // the following two should not, because coordinates differ
  ivec2 coord1 = ivec2(0, 1);
  ivec2 coord2 = ivec2(1, 1);
  vec4 val2 = imageLoad(tex, coord1);
  vec4 val3 = imageLoad(tex, coord2);

  if (val2.x == val3.x)
    atomicCounterIncrement(counter);

  // neither should the following two, because texture objects differ
  val2 = imageLoad(tex, coord2);
  val3 = imageLoad(tex1, coord2);

  if (val2.x != val3.x)
    atomicCounterIncrement(counter);
}

[test]
atomic counters 1

# Setup tex image
texture rgbw 0 (2, 2) GL_RGBA8
uniform int tex 0
image texture 0 GL_RGBA8
fb tex 2d 0
clear color 0.5 0.5 0.5 0.5
clear

# Setup tex1 image
texture rgbw 1 (2, 2) GL_RGBA8
uniform int tex1 1
image texture 1 GL_RGBA8
fb tex 2d 1
clear color 1.0 1.0 1.0 1.0
clear

# Probe output
compute 1 1 1
probe atomic counter 0 == 3
