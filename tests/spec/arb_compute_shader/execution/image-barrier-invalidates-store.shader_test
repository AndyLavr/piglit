# Verify that an image memory barrier invalidates
# a previously cached image store

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_compute_shader
GL_ARB_shader_image_load_store

[compute shader]
#version 330
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_image_load_store: enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(r32i) uniform iimage2D itex;
writeonly uniform image2D dst;

void main()
{
  ivec2 coord = ivec2(0, 0);

  imageStore(itex, coord, ivec4(0, 1, 1, 1));

  // the barrier should invalidate the previous cached store
  // (and everything else in the cache)
  memoryBarrierImage();

  imageStore(dst, coord, vec4(0.0, 0.0, 0.0, 0.0));
}

[test]
# Setup itex image
texture rgbw 0 (1, 1) GL_RGBA8
uniform int itex 0
image texture 0 GL_RGBA8
fb tex 2d 0
clear color 0.0 0.0 0.0 0.0
clear

# Setup dst image
texture rgbw 2 (1, 2) GL_RGBA8
uniform int dst 2
image texture 2 GL_RGBA8
fb tex 2d 2

# Clear dst image to not have the same color as the first test case
clear color 0.5 0.5 0.5 0.5
clear
probe all rgba 0.5 0.5 0.5 0.5

# Probe output
compute 1 1 1
relative probe rgba (0.0, 0.0) (0.0, 0.0, 0.0, 0.0)
