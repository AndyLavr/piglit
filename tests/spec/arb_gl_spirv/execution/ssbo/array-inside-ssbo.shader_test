# Using a array of arrays inside a ssbo, instead of a aoa of ssbo.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 3.30

[vertex shader passthrough]

[fragment shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 25
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %color
               OpExecutionMode %main OriginLowerLeft
               OpSource GLSL 450
               OpDecorate %color Location 0
               OpDecorate %_arr_v4float_uint_4 ArrayStride 16
               OpMemberDecorate %ssbo 0 Offset 0
               OpDecorate %ssbo BufferBlock
               OpDecorate %arr DescriptorSet 0
               OpDecorate %arr Binding 5
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
       %uint = OpTypeInt 32 0
     %uint_4 = OpConstant %uint 4
%_arr_v4float_uint_4 = OpTypeArray %v4float %uint_4
       %ssbo = OpTypeStruct %_arr_v4float_uint_4
%_ptr_Uniform_ssbo = OpTypePointer Uniform %ssbo
        %arr = OpVariable %_ptr_Uniform_ssbo Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_Uniform_v4float = OpTypePointer Uniform %v4float
      %int_1 = OpConstant %int 1
       %main = OpFunction %void None %3
          %5 = OpLabel
         %19 = OpAccessChain %_ptr_Uniform_v4float %arr %int_0 %int_0
         %20 = OpLoad %v4float %19
         %22 = OpAccessChain %_ptr_Uniform_v4float %arr %int_0 %int_1
         %23 = OpLoad %v4float %22
         %24 = OpFAdd %v4float %20 %23
               OpStore %color %24
               OpReturn
               OpFunctionEnd

[fragment shader]
#version 450

layout (location = 0) out vec4 color;

layout (std430, binding = 5) buffer ssbo {
	vec4 color[4];
} arr;



void main()
{
	color = arr.color[0] + arr.color[1];
}

[test]
clear color 0.2 0.2 0.2 0.2
clear

ssbo 5 64
ssbo 5 subdata float 0  0.11
ssbo 5 subdata float 4  0.12
ssbo 5 subdata float 8  0.13
ssbo 5 subdata float 12 0.14

ssbo 5 subdata float 16 0.21
ssbo 5 subdata float 20 0.22
ssbo 5 subdata float 24 0.23
ssbo 5 subdata float 28 0.24

ssbo 5 subdata float 32 0.31
ssbo 5 subdata float 36 0.32
ssbo 5 subdata float 40 0.33
ssbo 5 subdata float 44 0.34

ssbo 5 subdata float 48 0.41
ssbo 5 subdata float 52 0.42
ssbo 5 subdata float 56 0.43
ssbo 5 subdata float 60 0.44

block binding 5
verify program_interface_query GL_SHADER_STORAGE_BLOCK ssbo GL_NUM_ACTIVE_VARIABLES 1
verify program_interface_query GL_SHADER_STORAGE_BLOCK ssbo GL_BUFFER_DATA_SIZE 64

draw rect -1 -1 2 2
probe all rgba 0.32 0.34 0.36 0.38

verify program_query GL_ACTIVE_UNIFORMS 0