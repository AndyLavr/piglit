# Using a array inside a ubo, instead of an array of ubo.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 3.30

[vertex shader passthrough]

[fragment shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 4
; Bound: 29
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %color
               OpExecutionMode %main OriginLowerLeft
               OpSource GLSL 450
               OpName %main "main"
               OpName %color "color"
               OpName %block "block"
               OpMemberName %block 0 "color"
               OpName %arr "arr"
               OpDecorate %color Location 0
               OpDecorate %_arr_v4float_uint_3 ArrayStride 16
               OpMemberDecorate %block 0 Offset 0
               OpDecorate %block Block
               OpDecorate %arr DescriptorSet 0
               OpDecorate %arr Binding 5
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
       %uint = OpTypeInt 32 0
     %uint_3 = OpConstant %uint 3
%_arr_v4float_uint_3 = OpTypeArray %v4float %uint_3
      %block = OpTypeStruct %_arr_v4float_uint_3
%_ptr_Uniform_block = OpTypePointer Uniform %block
        %arr = OpVariable %_ptr_Uniform_block Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_Uniform_v4float = OpTypePointer Uniform %v4float
      %int_1 = OpConstant %int 1
      %int_2 = OpConstant %int 2
       %main = OpFunction %void None %3
          %5 = OpLabel
         %19 = OpAccessChain %_ptr_Uniform_v4float %arr %int_0 %int_0
         %20 = OpLoad %v4float %19
         %22 = OpAccessChain %_ptr_Uniform_v4float %arr %int_0 %int_1
         %23 = OpLoad %v4float %22
         %24 = OpFAdd %v4float %20 %23
         %26 = OpAccessChain %_ptr_Uniform_v4float %arr %int_0 %int_2
         %27 = OpLoad %v4float %26
         %28 = OpFAdd %v4float %24 %27
               OpStore %color %28
               OpReturn
               OpFunctionEnd

[fragment shader]
#version 450

layout (location = 0) out vec4 color;

layout (binding = 5) uniform block {
	vec4 color[3];
} arr;



void main()
{
	color = arr.color[0] + arr.color[1] + arr.color[2];
}

[test]
clear color 0.2 0.2 0.2 0.2
clear

ubo binding 5
ubo offset 0
uniform vec4 block.color[0] 0.0 0.1 0.2 0.3
ubo offset 16
uniform vec4 block.color[1] 0.4 0.5 0.6 0.2
ubo offset 32
uniform vec4 block.color[2] 0.1 0.3 0.1 0.2

draw rect -1 -1 2 2
probe all rgba 0.5 0.9 0.9 0.7
