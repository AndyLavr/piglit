# UBO test using a matrix. One stage. Using indirect indexing.

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_gl_spirv

[vertex shader passthrough]

[fragment shader]

#version 450

layout (location = 0) out vec4 outColor;
layout (location = 10) uniform int u_idx;
layout (binding = 5, row_major) uniform ComponentsBlock
 {
   mat4 matrix;
 } components;

void main()
{
	outColor = vec4(components.matrix[u_idx][0], components.matrix[u_idx][1], components.matrix[u_idx][2], components.matrix[u_idx][3]);
}

[test]
clear color 0.0 0.0 0.0 0.0
clear

ubo binding 5
ubo offset 0
ubo matrix stride 16
ubo row major 1
uniform mat4 ComponentsBlock.matrix 0.11 0.12 0.13 0.14 0.21 0.22 0.23 0.24 0.31 0.32 0.33 0.34 0.41 0.42 0.43 0.44

uniform int 10 0
draw rect -1 -1 2 2
probe all rgba 0.11 0.12 0.13 0.14

uniform int 10 1
draw rect -1 -1 2 2
probe all rgba 0.21 0.22 0.23 0.24

uniform int 10 2
draw rect -1 -1 2 2
probe all rgba 0.31 0.32 0.33 0.34

uniform int 10 3
draw rect -1 -1 2 2
probe all rgba 0.41 0.42 0.43 0.44

