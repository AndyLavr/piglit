# UBO test using an array of ubos, with a even more complex content.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 3.30
GL_ARB_gl_spirv

[vertex shader passthrough]

[fragment shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 83
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %outColor
               OpExecutionMode %main OriginLowerLeft
               OpSource GLSL 450
               OpDecorate %outColor Location 0
               OpDecorate %_arr_v3float_uint_3 ArrayStride 16
               OpDecorate %_arr_v4float_uint_4 ArrayStride 16
               OpDecorate %_arr_mat2v2float_uint_3 ArrayStride 32
               OpMemberDecorate %S 0 Offset 0
               OpMemberDecorate %S 1 Offset 48
               OpMemberDecorate %S 2 RowMajor
               OpMemberDecorate %S 2 Offset 112
               OpMemberDecorate %S 2 MatrixStride 16
               OpMemberDecorate %ComponentsBlock 0 Offset 0
               OpMemberDecorate %ComponentsBlock 1 Offset 8
               OpMemberDecorate %ComponentsBlock 2 Offset 16
               OpDecorate %ComponentsBlock Block
               OpDecorate %components DescriptorSet 0
               OpDecorate %components Binding 5
               OpDecorate %normal_array Location 3
               OpDecorate %normal_array DescriptorSet 0
               OpDecorate %normal_array Binding 0
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
   %outColor = OpVariable %_ptr_Output_v4float Output
    %v2float = OpTypeVector %float 2
    %v3float = OpTypeVector %float 3
       %uint = OpTypeInt 32 0
     %uint_3 = OpConstant %uint 3
%_arr_v3float_uint_3 = OpTypeArray %v3float %uint_3
     %uint_4 = OpConstant %uint 4
%_arr_v4float_uint_4 = OpTypeArray %v4float %uint_4
%mat2v2float = OpTypeMatrix %v2float 2
%_arr_mat2v2float_uint_3 = OpTypeArray %mat2v2float %uint_3
          %S = OpTypeStruct %_arr_v3float_uint_3 %_arr_v4float_uint_4 %_arr_mat2v2float_uint_3
%ComponentsBlock = OpTypeStruct %float %v2float %S
     %uint_2 = OpConstant %uint 2
%_arr_ComponentsBlock_uint_2 = OpTypeArray %ComponentsBlock %uint_2
%_ptr_Uniform__arr_ComponentsBlock_uint_2 = OpTypePointer Uniform %_arr_ComponentsBlock_uint_2
 %components = OpVariable %_ptr_Uniform__arr_ComponentsBlock_uint_2 Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_Uniform_float = OpTypePointer Uniform %float
      %int_1 = OpConstant %int 1
%_ptr_Uniform_v2float = OpTypePointer Uniform %v2float
    %float_0 = OpConstant %float 0
      %int_2 = OpConstant %int 2
%_ptr_Uniform_v3float = OpTypePointer Uniform %v3float
%_ptr_Uniform_v4float = OpTypePointer Uniform %v4float
     %uint_5 = OpConstant %uint 5
%_arr_v4float_uint_5 = OpTypeArray %v4float %uint_5
%_ptr_UniformConstant__arr_v4float_uint_5 = OpTypePointer UniformConstant %_arr_v4float_uint_5
%normal_array = OpVariable %_ptr_UniformConstant__arr_v4float_uint_5 UniformConstant
%_ptr_UniformConstant_v4float = OpTypePointer UniformConstant %v4float
       %main = OpFunction %void None %3
          %5 = OpLabel
         %28 = OpAccessChain %_ptr_Uniform_float %components %int_0 %int_0
         %29 = OpLoad %float %28
         %30 = OpCompositeConstruct %v4float %29 %29 %29 %29
         %33 = OpAccessChain %_ptr_Uniform_v2float %components %int_0 %int_1
         %34 = OpLoad %v2float %33
         %36 = OpCompositeExtract %float %34 0
         %37 = OpCompositeExtract %float %34 1
         %38 = OpCompositeConstruct %v4float %36 %37 %float_0 %float_0
         %39 = OpFAdd %v4float %30 %38
         %42 = OpAccessChain %_ptr_Uniform_v3float %components %int_0 %int_2 %int_0 %int_0
         %43 = OpLoad %v3float %42
         %44 = OpCompositeExtract %float %43 0
         %45 = OpCompositeExtract %float %43 1
         %46 = OpCompositeExtract %float %43 2
         %47 = OpCompositeConstruct %v4float %44 %45 %46 %float_0
         %48 = OpFAdd %v4float %39 %47
         %50 = OpAccessChain %_ptr_Uniform_v4float %components %int_0 %int_2 %int_1 %int_0
         %51 = OpLoad %v4float %50
         %52 = OpFAdd %v4float %48 %51
               OpStore %outColor %52
         %53 = OpAccessChain %_ptr_Uniform_float %components %int_1 %int_0
         %54 = OpLoad %float %53
         %55 = OpCompositeConstruct %v4float %54 %54 %54 %54
         %56 = OpAccessChain %_ptr_Uniform_v2float %components %int_1 %int_1
         %57 = OpLoad %v2float %56
         %58 = OpCompositeExtract %float %57 0
         %59 = OpCompositeExtract %float %57 1
         %60 = OpCompositeConstruct %v4float %58 %59 %float_0 %float_0
         %61 = OpFAdd %v4float %55 %60
         %62 = OpAccessChain %_ptr_Uniform_v3float %components %int_1 %int_2 %int_0 %int_0
         %63 = OpLoad %v3float %62
         %64 = OpCompositeExtract %float %63 0
         %65 = OpCompositeExtract %float %63 1
         %66 = OpCompositeExtract %float %63 2
         %67 = OpCompositeConstruct %v4float %64 %65 %66 %float_0
         %68 = OpFAdd %v4float %61 %67
         %69 = OpAccessChain %_ptr_Uniform_v4float %components %int_1 %int_2 %int_1 %int_0
         %70 = OpLoad %v4float %69
         %71 = OpFAdd %v4float %68 %70
         %72 = OpLoad %v4float %outColor
         %73 = OpFSub %v4float %72 %71
               OpStore %outColor %73
         %79 = OpAccessChain %_ptr_UniformConstant_v4float %normal_array %int_0
         %80 = OpLoad %v4float %79
         %81 = OpLoad %v4float %outColor
         %82 = OpFAdd %v4float %81 %80
               OpStore %outColor %82
               OpReturn
               OpFunctionEnd

[fragment shader]

#version 450

struct S {
  vec3 c3[3];
  vec4 c4[4];
  mat2x2 m22[3];
};

layout (location = 0) out vec4 outColor;
layout (std140, binding = 5, row_major) uniform ComponentsBlock
 {
    float c1;
    vec2 c2;
    S s;
 } components[2];

layout (location = 3) uniform vec4 normal_array[5];

void main()
{
    outColor =  vec4(components[0].c1) + vec4(components[0].c2, 0.0, 0.0)  + vec4(components[0].s.c3[0], 0) + components[0].s.c4[0];
    outColor -= vec4(components[1].c1) + vec4(components[1].c2, 0.0, 0.0)  + vec4(components[1].s.c3[0], 0) + components[1].s.c4[0];
    outColor += normal_array[0];
}

[test]
clear color 1.0 0.0 0.0 0.0
clear

uniform vec4 3 0.2 0.1 0.1 0.1

block binding 5

block array index 0
block offset 0
block offset 0
uniform float ComponentsBlock.c1   0.5
block offset 8
block offset 8
uniform vec2  ComponentsBlock.c2   0.2 0.3
block offset 16
block offset 16
uniform vec3  ComponentsBlock.s.c3 0.2 0.5 0.4
block offset 32
block offset 64
uniform vec4  ComponentsBlock.s.c4 0.2 0.3 0.4 0.5

block array index 1
block offset 0
block offset 0
uniform float ComponentsBlock.c1   0.1
block offset 8
block offset 8
uniform vec2  ComponentsBlock.c2   0.3 0.1
block offset 16
block offset 16
uniform vec3  ComponentsBlock.s.c3 0.5 0.3 0.3
block offset 32
block offset 64
uniform vec4  ComponentsBlock.s.c4 0.1 0.4 0.2 0.4


block binding 5
verify program_interface_query GL_UNIFORM_BLOCK ComponentsBlock[0] GL_NUM_ACTIVE_VARIABLES 5
verify program_interface_query GL_UNIFORM_BLOCK ComponentsBlock[0] GL_BUFFER_DATA_SIZE 224

block binding 6
verify program_interface_query GL_UNIFORM_BLOCK ComponentsBlock[1] GL_NUM_ACTIVE_VARIABLES 5
verify program_interface_query GL_UNIFORM_BLOCK ComponentsBlock[1] GL_BUFFER_DATA_SIZE 224

verify program_query GL_ACTIVE_UNIFORMS 6

draw rect -1 -1 2 2
probe all rgba 0.3 0.8 0.8 0.6
