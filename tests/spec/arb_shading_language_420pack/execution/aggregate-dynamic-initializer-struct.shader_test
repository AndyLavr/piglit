/*
 * This test differs from aggregate-initializer-struct.shader_test
 * in that it includes one dynamic variable, to further test the
 * compiler.  Otherwise, the initializer is constant folded away.
 * The structs should still be identical.
 */

[require]
GLSL >= 1.30
GL_ARB_shading_language_420pack

[vertex shader]
#extension GL_ARB_shading_language_420pack: enable

in vec4 piglit_vertex;
out vec4 color;

void main()
{
    struct S {
        vec4 v[2];
    };

    struct T {
        S a[2], b;
        int c;
    }
    s1 = T(
          S[2](
               S(vec4[2](vec4(piglit_vertex.x, 2.0, 3.0, 4.0), vec4(5.0, 6.0, 7.0, 8.0))),
               S(vec4[2](vec4(piglit_vertex.x, 2.0, 3.0, 4.0), vec4(5.0, 6.0, 7.0, 8.0)))
          ), // a
          S(vec4[2](vec4(piglit_vertex.x, 2.0, 3.0, 4.0), vec4(5.0, 6.0, 7.0, 8.0))), // b
          4 // c
    ),
    s2 = {
        {
            {
                {
                    {piglit_vertex.x, 2.0, 3.0, 4.0}, // a[0].v[0]
                    {5.0, 6.0, 7.0, 8.0}  // a[0].v[1]
                } // a[0].v
            }, // a[0]
            {
                {
                    {piglit_vertex.x, 2.0, 3.0, 4.0}, // a[1].v[0]
                    {5.0, 6.0, 7.0, 8.0}  // a[1].v[1]
                } // a[1].v
            } // a[1]
        }, // a
        {
            {
                {piglit_vertex.x, 2.0, 3.0, 4.0}, // b.v[0]
                {5.0, 6.0, 7.0, 8.0}  // b.v[1]
            } // b.v
        }, // b
        4 // c
    };

    color = vec4(0.0, 1.0, 0.0, 1.0);

    if (s1.a[0].v[0] != s2.a[0].v[0] ||
        s1.a[0].v[1] != s2.a[0].v[1] ||
        s1.a[1].v[0] != s2.a[1].v[0] ||
        s1.a[1].v[1] != s2.a[1].v[1] ||
        s1.b.v[0] != s2.b.v[0] ||
        s1.b.v[1] != s2.b.v[1] ||
        s1.c != s2.c) {
        color = vec4(1.0, 0.0, 0.0, 1.0);
    }
    gl_Position = piglit_vertex;
}

[fragment shader]
in vec4 color;
out vec4 frag_color;

void main() {
    frag_color = color;
}

[test]
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
