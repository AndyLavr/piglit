# Test layout component qualifier on a double between multiple shader stages.

[require]
GLSL >= 1.50
GL_ARB_enhanced_layouts
GL_ARB_separate_shader_objects
GL_ARB_gpu_shader_fp64

[vertex shader]
#version 150
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require
#extension GL_ARB_gpu_shader_fp64: require

// consume X/Y components in location 1
layout(location = 0) flat out dvec3 a;

// consume Z/W components
layout(location = 1, component = 2) flat out double b;

out vec4 vertex_to_gs;

in vec4 piglit_vertex;

void main()
{
  a = dvec3(0.0, 0.75, 1.0);
  b = 0.5LF;

  vertex_to_gs = piglit_vertex;
}

[geometry shader]
#version 150
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require
#extension GL_ARB_gpu_shader_fp64: require

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

// consume X/Y components in location 1
layout(location = 0) flat in dvec3 a[3];

// consume Z/W components
layout(location = 1, component = 2) flat in double b[3];

in vec4 vertex_to_gs[3];

// consume X/Y components in location 1
layout(location = 0) flat out dvec3 a_to_fs;

// consume Z/W components
layout(location = 1, component = 2) flat out double b_to_fs;

void main()
{
  for (int i = 0; i < 3; i++) {
    gl_Position = vertex_to_gs[i];
    a_to_fs = a[i];
    b_to_fs = b[i];
    EmitVertex();
  }
}

[fragment shader]
#version 150
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require
#extension GL_ARB_gpu_shader_fp64: require

out vec4 color;

// consume X/Y components in location 1
layout(location = 0) flat in dvec3 a_to_fs;

// consume Z/W components
layout(location = 1, component = 2) flat in double b_to_fs;

void main()
{
  color = vec4(b_to_fs, a_to_fs);
}

[test]
clear color 0.1 0.1 0.1 0.1
clear

draw rect -1 -1 2 2
probe all rgb 0.5 0 0.75
