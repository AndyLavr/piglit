[require]
GLSL >= 1.50

[vertex shader]
#version 150

in vec4 vertex;
out vec4 vertex_to_gs;

void main()
{
	vertex_to_gs = vertex;
}

[geometry shader]
#version 150

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

struct S {
	vec4 a, b, c, d;
};

uniform ubo1 {
	S colors;
};

in vec4 vertex_to_gs[3];
out vec4 v;

void main()
{
	for (int i = 0; i < 3; i++) {
		gl_Position = vertex_to_gs[i];

		S temp = colors;
		temp.c = vec4(0.0); /* try, but fail, to prevent copy prop */
		v = temp.a + temp.b + temp.c + temp.d;

		EmitVertex();
	}
}

[fragment shader]
#version 150

in vec4 v;

void main()
{
	gl_FragColor = v;
}

[vertex data]
vertex/float/2
-1.0 -1.0
 1.0 -1.0
 1.0  1.0
-1.0  1.0

[test]
uniform vec4 colors.a 0.0 0.0 0.0 0.0
uniform vec4 colors.b 0.0 1.0 0.0 0.0
uniform vec4 colors.c 1.0 0.0 0.0 0.0
uniform vec4 colors.d 0.0 0.0 0.0 0.0
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgba 0.0 1.0 0.0 0.0
